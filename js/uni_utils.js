// Generated by CoffeeScript 1.3.3
(function () {
	var strToUni, uniToStr, uniToUtf16;

	strToUni = function (str) {
		var code, i, uni;
		uni = [];
		i = 0;
		while (i !== str.length) {
			code = str.charCodeAt(i++);
			if ((0xD800 <= code && code < 0xDC00)) {
				uni.push(0x10000 + ((code & 0x3FF) << 10 | (str.charCodeAt(i++) & 0x3FF)));
			} else {
				uni.push(code);
			}
		}
		return uni;
	};

	uniToUtf16 = function (uni) {
		var code, i, utf16, _i, _len;
		utf16 = [];
		for (i = _i = 0, _len = uni.length; _i < _len; i = ++_i) {
			code = uni[i];
			if (code < 0x10000) {
				utf16.push(code);
			} else {
				code -= 0x10000;
				utf16.push(0xD800 | (code >> 10));
				utf16.push(0xDC00 | (code & 0x3FF));
			}
		}
		return utf16;
	};

	uniToStr = function (uni) {
		return String.fromCharCode.apply(String, uniToUtf16(uni));
	};

	function codePointToStr (cp) {
		if (cp < 0x10000) {return String.fromCharCode(cp);}
		cp -= 0x10000;
		return String.fromCharCode(0xD800 | (cp >> 10), 0xDC00 | (cp & 0x3FF));
	}

	function strToCodePoint (str) {
		var c = str.charCodeAt(0);
		return (0xD800 <= c && c < 0xDC00) ? (0x10000 + ((c & 0x3FF) << 10 | (str.charCodeAt(1) & 0x3FF))) : c;
	}

	module.exports = {
		uniToStr: uniToStr,
		uniToUtf16: uniToUtf16,
		strToUni: strToUni,
		strToCodePoint: strToCodePoint,
		codePointToStr: codePointToStr
	};

}).call(this);
